
services:
  db: 
    image: postgres:16
    container_name: postgres
    restart: always
    env_file:
      - ./app/backend/.env
    volumes:
      - database_files:/var/lib/postgresql/data
    networks:
      - transcendence
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 3s
      timeout: 5s
      retries: 5
    stop_grace_period: 30s 
  
  backend: 
    build: 
      context: ./app
      dockerfile: ./backend/Dockerfile
    image: backend
    env_file:
      - .env
    pull_policy: never
    container_name: backend
    restart: always
    ports: 
      - '3001:3001'
      - '5555:5555'
    volumes:
      - ./app:/app
      - node_modules:/node_modules
    depends_on:
      db:
        condition: service_healthy
    networks:
      - transcendence
    # Default command will run "start", uncommend below to run "start:watch" for development 
    # command: start:dev
    
  frontend:
    depends_on:
      - backend
    build: 
      context: ./app/frontend
      dockerfile: Dockerfile
    image: frontend
    env_file:
      - .env
    pull_policy: never
    container_name: frontend
    restart: always
    ports:
      - '3000:3000'
    volumes:
      - ./app:/app
      - node_modules:/node_modules
    networks:
      - transcendence
    # Default command will run "deploy", uncommend below to run "dev" for development 
    # command: ["dev"]

networks:
  transcendence:
    name: transcendence 

volumes:
  database_files:
    name: database_files
  node_modules:
    name: node_modules

