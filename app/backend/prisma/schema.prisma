// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ***************************************************************** //
//            INSTRUCTION FOR CHANGING DATABASE MODEL
// ***************************************************************** //
// 1. add new model of change existing model in this file
// 2. migrate the database by running this command in a running container
//    $ docker exec -it backend prisma db push
// 3. Adjust seed.ts if necessary so that the dummy data can be loaded
//    conform data definition.
// Note: after migration, the database is empty.

// ***************************************************************** //
//

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ***************************************************************** //
//			MODELS

model User {
    id        Int    @id @default(autoincrement())
    loginName String @unique
    hash      String

    userName  String? @unique
    email     String?
    firstName String?
    lastName  String?
    token42   String?
    token     Tokens[]

    avatarId Int          @default(1)
    online   OnlineStatus @default(OFFLINE)
    rank     Int?         @default(-1)

    chats ChatUsers[]
    games GameUser[]

	// friends User[] @relation("Friends")
	// friendOf User[] @relation("Friends")

	// blocked User[] @relation("Blocked")
	// blockedBy User[] @relation("Blocked")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tokens {
    id     Int    @id @default(autoincrement())
    token  String @unique
    userId Int
	  chatId Int?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
}

model Token42 {
  id            Int     @id @default(autoincrement())
  userId        Int     @unique
  access_token  String  @unique
  token_type    String
  refresh_token String
  scope         String

  createdAt           DateTime
  expiresAt           DateTime
  secret_valid_until  DateTime

  // user          User     @relation(fields: [userId], references: [id])
}

model Chat {
    id         Int      @id @default(autoincrement())
    ownerId    Int      @default(-1)
    visibility ChatType @default(PUBLIC)

    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    users     ChatUsers[]
    berichten ChatMessages[]
}

model ChatUsers {
    id             Int          @id @default(autoincrement())
    chatId         Int
    userId         Int
    lastRead       DateTime
    role           ChatUserRole @default(DEFAULT)
    isInChatRoom   Boolean      @default(false)
    unreadMessages Int          @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    chat      Chat     @relation(fields: [chatId], references: [id])
	@@unique([chatId, userId])
}

model ChatMessages {
    id      Int    @id @default(autoincrement())
    content String
    chatId  Int
    userId  Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    chat      Chat     @relation(fields: [chatId], references: [id])
}

model Game {
    id    Int       @id @default(autoincrement())
    state GameState

    GameUsers GameUser[]
}

model GameUser {
    id    Int      @id @default(autoincrement())
    score Int      @default(0)
    win   Boolean?

    gameId Int
    game   Game @relation(fields: [gameId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])
}

// ***************************************************************** //
//			ENUMS

enum OnlineStatus {
    OFFLINE
    ONLINE
    IN_GAME
}

enum ChatType {
    DM
    PRIVATE
    PROTECTED
    PUBLIC
}

enum ChatUserRole {
    DEFAULT
    ADMIN
    OWNER
}

enum GameState {
    WAITING
    READY_TO_START
    STARTED
    FINISHED
    ABORTED
}
