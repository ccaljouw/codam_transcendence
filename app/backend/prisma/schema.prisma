// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ***************************************************************** //
//            INSTRUCTION FOR CHANGING DATABASE MODEL
// ***************************************************************** //
// 1. add new model of change existing model in this file
// 2. migrate the database by running this command in a running container
//    $ docker exec -it backend prisma db push
// 3. Adjust seed.ts if necessary so that the dummy data can be loaded
//    conform data definition.
// Note: after migration, the database is empty.

// ***************************************************************** //
//

generator client {
	provider      = "prisma-client-js"
	binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

// ***************************************************************** //
//			MODELS

model User {
	id        Int    @id @default(autoincrement())
	loginName String @unique

  userName        String? @unique //if no userName is provided loginName is used
  email           String? @unique
  firstName       String?
  lastName        String?
  auth            Auth?
  token           Tokens[]

  twoFactEnabled  Boolean      @default(false)
  // avatarId        Int          @default(1)
  avatarUrl       String?      @default("/favicon.ico")
  theme           Int          @default(0)
  online          OnlineStatus @default(OFFLINE)

  chats ChatUsers[]
  games GameUser[]
  stats Stats?

	friends User[] @relation("Friends")
	friendOf User[] @relation("Friends")

	blocked User[] @relation("Blocked")
	blockedBy User[] @relation("Blocked")

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
}

model Tokens {
	id     Int    @id @default(autoincrement())
	token  String @unique
	userId Int
	chatId Int?

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	user      User     @relation(fields: [userId], references: [id])
}

model Auth {
  id     Int    @id @default(autoincrement())
  userId Int    @unique

  pwd            String?
  twoFactSecret  String?


  createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Chat {
	id         Int      @id @default(autoincrement())
	ownerId    Int      @default(-1)
	visibility ChatType @default(PUBLIC)
	name	   String  @default("")

	createdAt DateTime       @default(now())
	updatedAt DateTime       @updatedAt
	users     ChatUsers[]
	messages  ChatMessages[]
}

model ChatUsers {
	id             Int          @id @default(autoincrement())
	chatId         Int
	userId         Int
	lastRead       DateTime
	role           ChatUserRole @default(DEFAULT)
	isInChatRoom   Boolean      @default(false)
	unreadMessages Int          @default(0)

	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	user      User     @relation(fields: [userId], references: [id])
	chat      Chat     @relation(fields: [chatId], references: [id])
	@@unique([chatId, userId])
}

model ChatMessages {
	id      Int    @id @default(autoincrement())
	content String
	chatId  Int
	userId  Int

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    chat        Chat     @relation(fields: [chatId], references: [id])
	  invite      Invite?  @relation(fields: [inviteId], references: [id])
  	inviteId    Int? @unique
}

model Game {
    id              Int       @id @default(autoincrement())
    state           GameState
    GameUsers       GameUser[]
    longestRally    Int      @default(0)
    winnerId        Int?
    

    gameStartedAt   DateTime?
    gameFinishedAt  DateTime?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model GameUser {
    id        Int       @id @default(autoincrement())
    clientId  String
    player    Int
    score     Int       @default(0)

	gameId	Int
	game	Game @relation(fields: [gameId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])
    @@unique([gameId, player])
}

model Invite {
	id			Int  @id @default(autoincrement())
	chatId		Int
	senderId	Int
	recipientId	Int

	state		InviteStatus @default(SENT)
	type		InviteType

	createdAt	DateTime @default(now())
	updatedAt	DateTime @updatedAt
	expiredAt	DateTime @default(now()) //change\\
	chatMessage	ChatMessages? @relation()
//   chatMessageId Int?

}

// stats tracked to monitor achievements and rank
model Stats {
  id                 Int @id @default(autoincrement())
  userId             Int @unique
  wonLastGame        Boolean @default(false)
  wins               Int @default(0)
  losses             Int @default(0)
  winLossRatio       Float @default(1)
  consecutiveWins    Int @default(0)
  maxConsecutiveWins Int @default(0)
  achievements       Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

// ***************************************************************** //
//			ENUMS

enum OnlineStatus {
	OFFLINE
	IN_GAME
	ONLINE
}

enum ChatType {
	DM
	PRIVATE
	PROTECTED
	PUBLIC
}

enum ChatUserRole {
	DEFAULT
	ADMIN
	OWNER
}

enum GameState {
	WAITING
	READY_TO_START
	STARTED
	FINISHED
	ABORTED
}

enum InviteType {
	FRIEND
	CHAT
	GAME
}

enum InviteStatus {
	SENT
	ACCEPTED
	REJECTED
	EXPIRED
}
